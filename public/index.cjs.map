{"version":3,"sources":["../src/index.ts","../node_modules/tsup/assets/cjs_shims.js","../ultraviolet/index.js","../ultraviolet/path.js"],"sourcesContent":["import { resolve } from \"node:path\";\nimport {\n  readFileSync,\n  cpSync,\n  writeFileSync,\n  copyFileSync,\n  existsSync,\n  mkdirSync,\n  rmSync,\n  readdirSync,\n} from \"node:fs\";\nimport { createServer, Server } from \"node:http\";\nimport { Socket } from \"node:net\";\nimport express, { Request, Response, application, Next } from \"express\";\n//@ts-ignore\nimport { server as wisp, logging } from \"@mercuryworkshop/wisp-js/server\";\n//@ts-ignore\nimport { baremuxPath } from \"@mercuryworkshop/bare-mux/node\";\nimport { libcurlPath } from \"@mercuryworkshop/libcurl-transport\";\nimport { epoxyPath } from \"@mercuryworkshop/epoxy-transport\";\nimport { uvPath } from \"../ultraviolet/index.js\";\nimport { uvRandomPath } from \"../ultraviolet/path.js\";\nimport { scramjetPath } from \"@mercuryworkshop/scramjet\";\nimport createRammerhead, {\n  RammerheadProxy,\n} from \"rammerhead/src/server/index.js\";\nimport { ViteDevServer } from \"vite\";\n\nlogging.set_level(logging.ERROR);\n\ninterface WispOptions {\n  hostname_blacklist?: Array<RegExp>;\n  hostname_whitelist?: Array<RegExp>;\n  port_blacklist?: (number | Array<number>)[];\n  port_whitelist?: (number | Array<number>)[];\n  allow_direct_ip?: boolean;\n  allow_private_ips?: boolean;\n  allow_loopback_ips?: boolean;\n  stream_limit_per_host?: number;\n  stream_limit_total?: number;\n  allow_udp_streams?: boolean;\n  allow_tcp_streams?: boolean;\n  dns_ttl?: number;\n  dns_method?: \"lookup\" | \"resolve\";\n  dns_servers?: Array<string>;\n  dns_result_order?: \"ipv4first\" | \"ipv6first\" | \"verbatim\";\n  parse_real_ip?: boolean;\n  parse_real_ip_from?: Array<string>;\n}\n\ninterface Options {\n  uv?: boolean;\n  scramjet?: boolean;\n  rh?: boolean;\n  demoMode?: boolean;\n  default?: string;\n  wispOptions?: WispOptions;\n}\n\ninterface BuildOptions extends Options {\n  path?: string;\n}\n\ninterface ChemicalServer {\n  options: Options;\n  server: Server;\n  app: application;\n}\n\ninterface ChemicalBuild {\n  options: BuildOptions;\n}\n\nclass ChemicalServer {\n  constructor(options: Options = {}) {\n    if (options) {\n      if (typeof options !== \"object\" || Array.isArray(options)) {\n        options = {};\n        console.error(\"Error: ChemicalServer options invalid.\");\n      }\n    } else {\n      options = {};\n    }\n\n    if (options.uv === undefined) {\n      options.uv = true;\n    }\n\n    if (options.scramjet === undefined) {\n      options.scramjet = true;\n    }\n\n    if (options.rh === undefined) {\n      options.rh = true;\n    }\n\n    if (options.demoMode === undefined) {\n      options.demoMode = false;\n    }\n\n    this.options = options;\n    this.server = createServer();\n    this.app = express();\n    this.app.serveChemical = this.serveChemical;\n  }\n  [Symbol.iterator](): Iterator<application | Function> {\n    return [this.app, this.listen][Symbol.iterator]();\n  }\n  serveChemical = () => {\n    const rh: RammerheadProxy = createRammerhead();\n    const rammerheadScopes: Array<string> = [\n      \"/rammerhead.js\",\n      \"/hammerhead.js\",\n      \"/transport-worker.js\",\n      \"/task.js\",\n      \"/iframe-task.js\",\n      \"/worker-hammerhead.js\",\n      \"/messaging\",\n      \"/sessionexists\",\n      \"/deletesession\",\n      \"/newsession\",\n      \"/editsession\",\n      \"/needpassword\",\n      \"/syncLocalStorage\",\n      \"/api/shuffleDict\",\n    ];\n    const rammerheadSession: RegExp = /^\\/[a-z0-9]{32}/;\n    const shouldRouteRh = (req: Request): boolean => {\n      const url = new URL(req.url, \"http://0.0.0.0\");\n      return (\n        rammerheadScopes.includes(url.pathname) ||\n        rammerheadSession.test(url.pathname)\n      );\n    };\n    const routeRhRequest = (req: Request, res: Response) => {\n      rh.emit(\"request\", req, res);\n    };\n    const routeRhUpgrade = (req: Request, socket: Socket, head: Buffer) => {\n      rh.emit(\"upgrade\", req, socket, head);\n    };\n\n    this.app.get(\"/chemical.js\", async (req: Request, res: Response) => {\n      let chemicalMain = await readFileSync(\n        resolve(__dirname, \"../client/chemical.js\"),\n        \"utf8\"\n      );\n\n      if (this.options.default) {\n        if ([\"uv\", \"rh\", \"scramjet\"].includes(this.options.default)) {\n          chemicalMain =\n            `const defaultService = \"${this.options.default}\";\\n\\n` +\n            chemicalMain;\n        } else {\n          chemicalMain = `const defaultService = \"uv\";\\n\\n` + chemicalMain;\n          console.error(\"Error: Chemical default option invalid.\");\n        }\n      } else {\n        chemicalMain = `const defaultService = \"uv\";\\n\\n` + chemicalMain;\n      }\n\n      chemicalMain =\n        \"const uvEnabled = \" + String(this.options.uv) + \";\\n\" + chemicalMain;\n      chemicalMain =\n        \"const scramjetEnabled = \" +\n        String(this.options.scramjet) +\n        \";\\n\" +\n        chemicalMain;\n      chemicalMain =\n        \"const rammerheadEnabled = \" +\n        String(this.options.rh) +\n        \";\\n\" +\n        chemicalMain;\n      chemicalMain =\n        \"const demoMode = \" +\n        String(this.options.demoMode) +\n        \";\\n\" +\n        chemicalMain;\n      chemicalMain =\n        `const uvRandomPath = \"${String(uvRandomPath)}\";\\n` + chemicalMain;\n\n      chemicalMain = \"(async () => {\\n\" + chemicalMain + \"\\n})();\";\n\n      res.type(\"application/javascript\");\n      return res.send(chemicalMain);\n    });\n    this.app.get(\"/chemical.sw.js\", async (req: Request, res: Response) => {\n      let chemicalSW = await readFileSync(\n        resolve(__dirname, \"../client/chemical.sw.js\"),\n        \"utf8\"\n      );\n\n      chemicalSW =\n        \"const uvEnabled = \" + String(this.options.uv) + \";\\n\" + chemicalSW;\n      chemicalSW =\n        \"const scramjetEnabled = \" +\n        String(this.options.scramjet) +\n        \";\\n\" +\n        chemicalSW;\n      chemicalSW =\n        \"const rammerheadEnabled = \" +\n        String(this.options.rh) +\n        \";\\n\" +\n        chemicalSW;\n      chemicalSW =\n        `const uvRandomPath = \"${String(uvRandomPath)}\";\\n` + chemicalSW;\n\n      res.type(\"application/javascript\");\n      return res.send(chemicalSW);\n    });\n    this.app.use(express.static(resolve(__dirname, \"../client\")));\n    this.app.use(\"/baremux/\", express.static(baremuxPath));\n    this.app.use(\"/libcurl/\", express.static(libcurlPath));\n    this.app.use(\"/epoxy/\", express.static(epoxyPath));\n    if (this.options.uv) {\n      this.app.use(`/${uvRandomPath}/`, express.static(uvPath));\n    }\n    if (this.options.scramjet) {\n      this.app.use(\"/scramjet/\", express.static(scramjetPath));\n    }\n    this.server.on(\"request\", (req: Request, res: Response) => {\n      if (this.options.rh && shouldRouteRh(req)) {\n        routeRhRequest(req, res);\n      } else {\n        this.app(req, res);\n      }\n    });\n    this.server.on(\"upgrade\", (req: Request, socket: Socket, head: Buffer) => {\n      if (req.url && req.url.endsWith(\"/wisp/\")) {\n        if (this.options.wispOptions) {\n          for (let option in this.options.wispOptions) {\n            //@ts-ignore\n            wisp.options[option] = this.options.wispOptions[option];\n          }\n        }\n        wisp.routeRequest(req, socket, head);\n      } else if (this.options.rh && shouldRouteRh(req)) {\n        routeRhUpgrade(req, socket, head);\n      } else {\n        socket.end();\n      }\n    });\n  };\n  listen = (port: number, callback: () => void) => {\n    this.server.listen(port, callback);\n  };\n}\n\nconst ChemicalVitePlugin = (options: Options) => ({\n  name: \"chemical-vite-plugin\",\n  configureServer(server: ViteDevServer) {\n    if (options) {\n      if (typeof options !== \"object\" || Array.isArray(options)) {\n        options = {};\n        console.error(\"Error: ChemicalServer options invalid.\");\n      }\n    } else {\n      options = {};\n    }\n\n    if (options.uv === undefined) {\n      options.uv = true;\n    }\n\n    if (options.scramjet === undefined) {\n      options.scramjet = true;\n    }\n\n    if (options.rh === undefined) {\n      options.rh = true;\n    }\n\n    if (options.demoMode === undefined) {\n      options.demoMode = false;\n    }\n\n    const rh: RammerheadProxy = createRammerhead();\n    const rammerheadScopes: Array<string> = [\n      \"/rammerhead.js\",\n      \"/hammerhead.js\",\n      \"/transport-worker.js\",\n      \"/task.js\",\n      \"/iframe-task.js\",\n      \"/worker-hammerhead.js\",\n      \"/messaging\",\n      \"/sessionexists\",\n      \"/deletesession\",\n      \"/newsession\",\n      \"/editsession\",\n      \"/needpassword\",\n      \"/syncLocalStorage\",\n      \"/api/shuffleDict\",\n    ];\n    const rammerheadSession: RegExp = /^\\/[a-z0-9]{32}/;\n    const shouldRouteRh = (req: Request): boolean => {\n      const url: URL = new URL(req.url, \"http://0.0.0.0\");\n      return (\n        rammerheadScopes.includes(url.pathname) ||\n        rammerheadSession.test(url.pathname)\n      );\n    };\n    const routeRhRequest = (req: Request, res: Response) => {\n      rh.emit(\"request\", req, res);\n    };\n    const routeRhUpgrade = (req: Request, socket: Socket, head: Buffer) => {\n      rh.emit(\"upgrade\", req, socket, head);\n    };\n\n    const app: application = express();\n    app.get(\"/chemical.js\", async function (req: Request, res: Response) {\n      let chemicalMain: string = await readFileSync(\n        resolve(__dirname, \"../client/chemical.js\"),\n        \"utf8\"\n      );\n\n      if (options.default) {\n        if ([\"uv\", \"rh\", \"scramjet\"].includes(options.default)) {\n          chemicalMain =\n            `const defaultService = \"${options.default}\";\\n\\n` + chemicalMain;\n        } else {\n          chemicalMain = `const defaultService = \"uv\";\\n\\n` + chemicalMain;\n          console.error(\"Error: Chemical default option invalid.\");\n        }\n      } else {\n        chemicalMain = `const defaultService = \"uv\";\\n\\n` + chemicalMain;\n      }\n\n      chemicalMain =\n        \"const uvEnabled = \" + String(options.uv) + \";\\n\" + chemicalMain;\n      chemicalMain =\n        \"const scramjetEnabled = \" +\n        String(options.scramjet) +\n        \";\\n\" +\n        chemicalMain;\n      chemicalMain =\n        \"const rammerheadEnabled = \" +\n        String(options.rh) +\n        \";\\n\" +\n        chemicalMain;\n      chemicalMain =\n        \"const demoMode = \" + String(options.demoMode) + \";\\n\" + chemicalMain;\n      chemicalMain =\n        `const uvRandomPath = \"${String(uvRandomPath)}\";\\n` + chemicalMain;\n\n      chemicalMain = \"(async () => {\\n\" + chemicalMain + \"\\n})();\";\n\n      res.type(\"application/javascript\");\n      return res.send(chemicalMain);\n    });\n    app.get(\"/chemical.sw.js\", async function (req: Request, res: Response) {\n      let chemicalSW: string = await readFileSync(\n        resolve(__dirname, \"../client/chemical.sw.js\"),\n        \"utf8\"\n      );\n\n      chemicalSW =\n        \"const uvEnabled = \" + String(options.uv) + \";\\n\" + chemicalSW;\n      chemicalSW =\n        \"const scramjetEnabled = \" +\n        String(options.scramjet) +\n        \";\\n\" +\n        chemicalSW;\n      chemicalSW =\n        \"const rammerheadEnabled = \" +\n        String(options.rh) +\n        \";\\n\" +\n        chemicalSW;\n      chemicalSW =\n        `const uvRandomPath = \"${String(uvRandomPath)}\";\\n` + chemicalSW;\n\n      res.type(\"application/javascript\");\n      return res.send(chemicalSW);\n    });\n    app.use(express.static(resolve(__dirname, \"../client\")));\n    app.use(\"/baremux/\", express.static(baremuxPath));\n    app.use(\"/libcurl/\", express.static(libcurlPath));\n    app.use(\"/epoxy/\", express.static(epoxyPath));\n    if (options.uv) {\n      app.use(`/${uvRandomPath}/`, express.static(uvPath));\n    }\n    if (options.scramjet) {\n      app.use(\"/scramjet/\", express.static(scramjetPath));\n    }\n    server.middlewares.use(app);\n\n    server.middlewares.use((req: Request, res: Request, next: Next) => {\n      if (options.rh && shouldRouteRh(req)) {\n        routeRhRequest(req, res);\n      } else {\n        next();\n      }\n    });\n\n    const upgraders = server.httpServer?.listeners(\"upgrade\") as ((\n      ...args: any[]\n    ) => void)[];\n\n    for (const upgrader of upgraders) {\n      server?.httpServer?.off(\"upgrade\", upgrader);\n    }\n\n    server?.httpServer?.on(\n      \"upgrade\",\n      (req: Request, socket: Socket, head: Buffer) => {\n        if (req.url && req.url.endsWith(\"/wisp/\")) {\n          if (options.wispOptions) {\n            for (let option in options.wispOptions) {\n              //@ts-ignore\n              wisp.options[option] = options.wispOptions[option];\n            }\n          }\n          wisp.routeRequest(req, socket, head);\n        } else if (options.rh && shouldRouteRh(req)) {\n          routeRhUpgrade(req, socket, head);\n        } else {\n          for (const upgrader of upgraders) {\n            upgrader(req, socket, head);\n          }\n        }\n      }\n    );\n  },\n});\n\nclass ChemicalBuild {\n  constructor(options: BuildOptions) {\n    if (options) {\n      if (typeof options !== \"object\" || Array.isArray(options)) {\n        options = {};\n        console.error(\"Error: ChemicalBuild options invalid.\");\n      }\n    } else {\n      options = {};\n    }\n\n    if (options.path === undefined) {\n      options.path = \"dist\";\n    }\n\n    if (options.path.startsWith(\"/\")) {\n      options.path = options.path.substring(1);\n    }\n\n    if (options.path.endsWith(\"/\")) {\n      options.path = options.path.slice(0, -1);\n    }\n\n    if (options.uv === undefined) {\n      options.uv = true;\n    }\n\n    if (options.scramjet === undefined) {\n      options.scramjet = true;\n    }\n\n    if (options.rh === undefined) {\n      options.rh = true;\n    }\n\n    if (options.demoMode === undefined) {\n      options.demoMode = false;\n    }\n\n    this.options = options;\n  }\n  async write(deletePath: boolean = false) {\n    if (!existsSync(resolve(this.options.path || \"\"))) {\n      mkdirSync(resolve(this.options.path || \"\"), { recursive: true });\n    } else {\n      if (deletePath) {\n        readdirSync(resolve(this.options.path || \"\")).forEach((file) =>\n          rmSync(resolve(this.options.path || \"\", file), { recursive: true })\n        );\n      }\n    }\n\n    let chemicalMain: string = await readFileSync(\n      resolve(__dirname, \"../client/chemical.js\"),\n      \"utf8\"\n    );\n\n    if (this.options.default) {\n      if ([\"uv\", \"rh\", \"scramjet\"].includes(this.options.default)) {\n        chemicalMain =\n          `const defaultService = \"${this.options.default}\";\\n\\n` +\n          chemicalMain;\n      } else {\n        chemicalMain = `const defaultService = \"uv\";\\n\\n` + chemicalMain;\n        console.error(\"Error: Chemical default option invalid.\");\n      }\n    } else {\n      chemicalMain = `const defaultService = \"uv\";\\n\\n` + chemicalMain;\n    }\n\n    chemicalMain =\n      \"const uvEnabled = \" + String(this.options.uv) + \";\\n\" + chemicalMain;\n    chemicalMain =\n      \"const scramjetEnabled = \" +\n      String(this.options.scramjet) +\n      \";\\n\" +\n      chemicalMain;\n    chemicalMain =\n      \"const rammerheadEnabled = \" +\n      String(this.options.rh) +\n      \";\\n\" +\n      chemicalMain;\n    chemicalMain =\n      \"const demoMode = \" +\n      String(this.options.demoMode) +\n      \";\\n\" +\n      chemicalMain;\n    chemicalMain =\n      `const uvRandomPath = \"${String(uvRandomPath)}\";\\n` + chemicalMain;\n\n    chemicalMain = \"(async () => {\\n\" + chemicalMain + \"\\n})();\";\n\n    writeFileSync(\n      resolve(this.options.path || \"\", \"chemical.js\"),\n      chemicalMain\n    );\n\n    let chemicalSW: string = await readFileSync(\n      resolve(__dirname, \"../client/chemical.sw.js\"),\n      \"utf8\"\n    );\n\n    chemicalSW =\n      \"const uvEnabled = \" + String(this.options.uv) + \";\\n\" + chemicalSW;\n    chemicalSW =\n      \"const scramjetEnabled = \" +\n      String(this.options.scramjet) +\n      \";\\n\" +\n      chemicalSW;\n    chemicalSW =\n      \"const rammerheadEnabled = \" +\n      String(this.options.rh) +\n      \";\\n\" +\n      chemicalSW;\n    chemicalSW =\n      `const uvRandomPath = \"${String(uvRandomPath)}\";\\n` + chemicalSW;\n\n    writeFileSync(\n      resolve(this.options.path || \"\", \"chemical.sw.js\"),\n      chemicalSW\n    );\n\n    if (this.options.demoMode) {\n      copyFileSync(\n        resolve(__dirname, \"client/chemical.demo.html\"),\n        resolve(this.options.path || \"\", \"chemical.demo.html\")\n      );\n    }\n\n    cpSync(baremuxPath, resolve(this.options.path || \"\", \"baremux\"), {\n      recursive: true,\n    });\n    cpSync(libcurlPath, resolve(this.options.path || \"\", \"libcurl\"), {\n      recursive: true,\n    });\n    cpSync(epoxyPath, resolve(this.options.path || \"\", \"epoxy\"), {\n      recursive: true,\n    });\n    cpSync(libcurlPath, resolve(this.options.path || \"\", \"libcurl\"), {\n      recursive: true,\n    });\n    if (this.options.uv) {\n      cpSync(uvPath, resolve(this.options.path || \"\", uvRandomPath), {\n        recursive: true,\n      });\n    }\n  }\n}\n\nexport { ChemicalServer, ChemicalBuild, ChemicalVitePlugin };\n","// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL(`file:${__filename}`).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","import { resolve, dirname } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\nconst uvPath = resolve(__dirname, \"../ultraviolet/dist/\");\n\nexport { uvPath };\n","const uvRandomPath = \"_hPRTiIRrX\";\n\nexport { uvRandomPath };"],"mappings":"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","names":["import_node_path","__dirname","import_server","express","createRammerhead","wisp"]}